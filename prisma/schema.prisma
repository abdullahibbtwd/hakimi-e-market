generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  role      UserRole  @default(USER)
  products  Product[]
  accounts  Account[]
  address   Address[]
  orders    Order[]
  cart      Cart?
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrderStatus @default(PENDING)
  addressId  String?
  address    Address?    @relation(fields: [addressId], references: [id], onDelete: SetNull)
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Product {
  id          String      @id @default(uuid())
  userId      String
  name        String
  description String
  price       Float
  offerPrice  Float
  imageUrl    String[]
  cartItems   CartItem[]
  category    String
  Stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model Address {
  id          String  @id @default(uuid())
  fullname    String
  phoneNumber String
  pincode     String
  area        String
  city        String
  state       String
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  orders      Order[]
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
}

model Banner {
  id          String   @id @default(uuid())
  name        String
  description String
  imageUrl    String[]
}
